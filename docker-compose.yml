
version: '3.8'

services:
  # Node.js UDP/TCP syslog listener
  ingest:
    build:
      context: ./ingest
    ports:
      - "514:514/udp"
      - "514:514/tcp"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      - db
    restart: unless-stopped
    volumes:
      - ingest_logs:/app/logs
    networks:
      - logforge_network

  # PostgreSQL 16 + TimescaleDB + pgvector
  db:
    image: timescale/timescaledb-ha:pg16-latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - db_logs:/var/log/postgresql
    restart: unless-stopped
    networks:
      - logforge_network

  # FastAPI, REST + WebSocket
  api:
    build:
      context: ./api
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    depends_on:
      - db
    restart: unless-stopped
    volumes:
      - api_logs:/app/logs
    networks:
      - logforge_network

  # React 18 + Vite + Tailwind
  ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=${API_URL}
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - logforge_network

  # Python IsolationForest, CPU-only
  ai_anomaly:
    build:
      context: ./ai_anomaly
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - PROCESSING_INTERVAL=${ANOMALY_PROCESSING_INTERVAL}
    depends_on:
      - db
    restart: unless-stopped
    volumes:
      - ai_anomaly_logs:/app/logs
    networks:
      - logforge_network

  # Ollama TinyLlama-1.1B, CPU-only
  ai_nl:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
      - ai_nl_logs:/var/log/ollama
    ports:
      - "11434:11434"
    command: ["serve"]
    restart: unless-stopped
    networks:
      - logforge_network

  # Prophet forecasting service
  ai_forecast:
    build:
      context: ./ai_forecast
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - FORECAST_INTERVAL=${FORECAST_INTERVAL}
    depends_on:
      - db
    restart: unless-stopped
    volumes:
      - ai_forecast_logs:/app/logs
    networks:
      - logforge_network

  # Database backup service
  backup:
    image: postgres:16
    volumes:
      - ./tools/backup_db.sh:/backup_db.sh
      - backup_data:/backups
      - db_logs:/var/log/postgresql
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - BACKUP_RETENTION=${BACKUP_RETENTION}
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "chmod +x /backup_db.sh && 
      echo '0 2 * * * /backup_db.sh >> /var/log/postgresql/backup.log 2>&1' > /var/spool/cron/crontabs/root && 
      crontab /var/spool/cron/crontabs/root &&
      crond -f -d 8"
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - logforge_network

  # Log rotation service
  logrotate:
    image: alpine:latest
    volumes:
      - ./tools/logrotate.conf:/etc/logrotate.conf
      - ingest_logs:/logs/ingest
      - api_logs:/logs/api
      - db_logs:/logs/db
      - ai_anomaly_logs:/logs/ai_anomaly
      - ai_nl_logs:/logs/ai_nl
      - ai_forecast_logs:/logs/ai_forecast
    command: >
      sh -c "apk add --no-cache logrotate && 
      echo '0 0 * * * logrotate -f /etc/logrotate.conf > /dev/null 2>&1' > /etc/crontabs/root && 
      crond -f -d 8"
    restart: unless-stopped
    networks:
      - logforge_network

networks:
  logforge_network:
    driver: bridge

volumes:
  pgdata:
  ollama_data:
  ingest_logs:
  db_logs:
  api_logs:
  ai_anomaly_logs:
  ai_nl_logs:
  ai_forecast_logs:
  backup_data:
